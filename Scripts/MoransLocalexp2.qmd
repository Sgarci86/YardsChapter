### Moran's Local - this one is the final code for Local

```{r}
library(tidyverse)
library(dplyr)
library(reshape2)
#This section fixes the error files and the parameter file and finally binding them together to run graphs
getwd()
#Reading in Moran's Local file
#the file came through with missing list files, not sure why. Each time it came through it was different. I had to use the View() function in order to see the list files in order
MoranLocalexp2<-readRDS("exp2_moran_local.rds")
View(MoranLocalexp2)

#these were the ones that needed to be deleted
MoranLocalexp2[c(63,64,69,92,94,96,250,256,280,302:307,335:338,340)] <- NULL
View(MoranLocalexp2)
#you had to turn it into a dataframe first after cleaning it up. Then you can turn the dataframe into a tibble
dfMoranLocalexp2 <- as.data.frame(MoranLocalexp2)
tibMoranLocalexp2<-as.tibble(dfMoranLocalexp2)  


#get the dist.class columns
Morandistexp2 <- tibMoranLocalexp2 %>% dplyr::select(contains("dist.class")) %>% reshape2::melt(cols=c("1":"460"), id.vars=NULL) %>% select(cols = "value") %>% dplyr::rename(Moran.dist.class = cols)
#get coefficient column
Moranstatexp2 <- tibMoranLocalexp2 %>% dplyr::select(contains("coef")) %>% reshape2::melt(cols=c("1":"460"), id.vars=NULL) %>% 
  select(cols = "value") %>% dplyr::rename(Moran.local = cols)
#You have to make sure dplyr::select is on. Melt is from reshape2. 

# do the same to get the pvalue column below
MoranPvalueexp2 <- tibMoranLocalexp2 %>% dplyr::select(contains("p.value")) %>% melt(cols=c("1":"460"), id.vars=NULL) %>% select(cols = "value") %>% dplyr::rename(p.value = cols)

#put the all columns together
MoranLocalstatsexp2 <- cbind(Morandistexp2, Moranstatexp2, MoranPvalueexp2)
View(MoranLocalstatsexp2)

#needed to create a row ID first so I could extract the first 15 rows of each 
Rownumber <-rep(c(1:68), times = 460) #this would total XXX rows
Rownumber <- as.data.frame(Rownumber) #make it a data frame so you can bind

#bind the columns all together again
FinalColumns <- cbind(MoranLocalstatsexp2, Rownumber)

#now only extract the first 15 rows from the Rownumber column 
FinalColumnsexp2 <- dplyr::filter(FinalColumns, Rownumber %in% c("1": "15"))

View(FinalColumnsexp2)
#write.csv(FinalColumnsMoran, "FinalColumnsMoran.csv")

#add these FinalColumnsMoran to the parameter file but first fix the parameter file to eliminate the files that came back homogeneous 
ParameterTableMimic<-read.csv("table_exp2Nurseries1_4mimic_constraints.csv")
Param<-ParameterTableMimic 
Paramtib <- as.tibble(Param)
View(Paramtib)

#since Param is not a list, it comes in as a csv, you have to delete by -c
Paramtibfixed <- Paramtib[-c(63,64,69,92,94,96,250,256,280,302:307,335:338,340), ]
View(Paramtibfixed)
#the above did not put them in order, so you have to replace the run column 
Run1 <- as.data.frame(c(1:460)) %>% select(cols = "c(1:460)") %>% dplyr::rename(Run = cols)

Paramtibfixed$Run <- Run1$Run
View(Paramtibfixed)
#parameter file is fixed but now you have to repeat each row so that it can match up with the 15 distance classes that way you can graph it. In this case 7,230 rows

```

### Fixing the parameter file so it repeats 15 times

```{r}
#this made replicates of the rows for the 482 runs. So fifteen rows of Run 1, fifteen rows of Run 2 etc... 
#Repeat rows 1 through 478, 15 times, for all columns , ] 
dfexp2 <- Paramtibfixed
ParametersMoran<-dfexp2[rep(seq_len(nrow(dfexp2)), each = 15), ]  
View(ParametersMoran)

#take out what you don't need from file (I don't see these so no need)
#ParametersMoranCleaned<- ParametersMoran %>% subset(select = -c(Step.Number, X, X.1, #X.2))

#now combine the Moran statistic column with the parameter file
MoransLocalexp2finalfile <- cbind(FinalColumnsexp2, ParametersMoran)
write.csv(MoransLocalexp2finalfile, "MoransLocalexp2finalfile.csv")
View(MoransLocalexp2finalfile)
```

### Graphs for Moran Local with Parameters

```{r}
#| warning: false
## Visualization

library(ggplot2)
#ggplot needs for this column to be change to as.factor to graph it

MoransLocalexp2finalfile<-MoransLocalexp2finalfile %>% dplyr::rename(HT = Happy.type)
MoransLocalexp2finalfile<-MoransLocalexp2finalfile %>% dplyr::rename(Nursery = Num.nursery)
MoransLocalexp2finalfile$Nursery = as.factor(MoransLocalexp2finalfile$Nursery)
MoransLocalexp2finalfile$Yard.diff = as.factor(MoransLocalexp2finalfile$Yard.diff)

View(MLequaldata)
View(MLequalorgreaterdata)
View(MoransLocalexp2finalfile)

 
#subset the happy.type equal factor 
attach(MoransLocalexp2finalfile) #to begin the subset
MLequaldata <- MoransLocalexp2finalfile[which(HT == 'equal'),]
#detach(MoransLocalexp2finalfile) #to go back to normal if needed

 ggplot(MLequaldata, aes(x = as.numeric(as.character(Moran.dist.class)), y = Moran.local, color = Nursery, linetype = Yard.diff)) +  
  geom_point(alpha = 0.2) + geom_smooth(se = FALSE) + scale_x_continuous(limits = c(0,30), breaks = c(10,20,30)) +
  geom_hline(yintercept = 0, linetype = 'longdash') + facet_grid(Neighbor.distance ~ Constraint, labeller = "label_both") +
  labs(x = "Yard Distance", y = "Moran I", title = "Local Moran I Over 30 Yards", subtitle = "Happy Type = equal") + theme_bw()
 
 
#subset the happy.type equal-or-greater factor 
attach(MoransLocalexp2finalfile) #to begin the subset
MLequalorgreaterdata <- MoransLocalexp2finalfile[which(HT == 'equal-or-greater'),]
#detach(MoransLocalexp2finalfile) #to go back to normal if needed 
  
 ggplot(MLequalorgreaterdata, aes(x = as.numeric(as.character(Moran.dist.class)), y = Moran.local, color = Nursery, linetype = Yard.diff)) +  
  geom_point(alpha = 0.2) + geom_smooth(se = FALSE) + scale_x_continuous(limits = c(0,30), breaks = c(10,20,30)) +
  geom_hline(yintercept = 0, linetype = 'longdash') + facet_grid(Neighbor.distance ~ Constraint, labeller = "label_both") +
  labs(x = "Yard Distance", y = "Moran I", title = "Local Moran I Over 30 Yards", subtitle = "Happy Type = equal-or-greater") + theme_bw()
 
```
